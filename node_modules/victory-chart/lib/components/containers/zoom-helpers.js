Object.defineProperty(exports,"__esModule",{value:true});exports.RawZoomHelpers=undefined;var _isEqual2=require("lodash/isEqual");var _isEqual3=_interopRequireDefault(_isEqual2);var _defaults2=require("lodash/defaults");var _defaults3=_interopRequireDefault(_defaults2);var _isFunction2=require("lodash/isFunction");var _isFunction3=_interopRequireDefault(_isFunction2);var _throttle2=require("lodash/throttle");var _throttle3=_interopRequireDefault(_throttle2);var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[typeof Symbol==="function"?Symbol.iterator:"@@iterator"](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"])_i["return"]();}finally{if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if((typeof Symbol==="function"?Symbol.iterator:"@@iterator")in Object(arr)){return sliceIterator(arr,i);}else{throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();
var _react=require("react");
var _victoryCore=require("victory-core");

var _eventHandlers=require("../../helpers/event-handlers.js");
var _wrapper=require("../../helpers/wrapper");var _wrapper2=_interopRequireDefault(_wrapper);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}

var Helpers={









scale:function scale(currentDomain,evt,props,axis){var _currentDomain=_slicedToArray(
currentDomain,2),from=_currentDomain[0],to=_currentDomain[1];
var range=Math.abs(to-from);
var minimumZoom=props.minimumZoom&&props.minimumZoom[axis];
var factor=this.getScaleFactor(evt);
if(minimumZoom&&range<=minimumZoom&&factor<1){
return currentDomain;
}var _getDomain$axis=_slicedToArray(
this.getDomain(props)[axis],2),fromBound=_getDomain$axis[0],toBound=_getDomain$axis[1];
var percent=this.getScalePercent(evt,props,axis);
var point=factor*from+percent*(factor*range);
var minDomain=this.getMinimumDomain(point,props,axis);var _getScaledDomain=
this.getScaledDomain(currentDomain,factor,percent),_getScaledDomain2=_slicedToArray(_getScaledDomain,2),newMin=_getScaledDomain2[0],newMax=_getScaledDomain2[1];
var newDomain=[
newMin>fromBound&&newMin<toBound?newMin:fromBound,
newMax<toBound&&newMax>fromBound?newMax:toBound];

var domain=Math.abs(minDomain[1]-minDomain[0])>Math.abs(newDomain[1]-newDomain[0])?
minDomain:newDomain;
return _victoryCore.Collection.containsDates([fromBound,toBound])?
[new Date(domain[0]),new Date(domain[1])]:domain;
},

getScaledDomain:function getScaledDomain(currentDomain,factor,percent){var _currentDomain2=_slicedToArray(
currentDomain,2),from=_currentDomain2[0],to=_currentDomain2[1];
var range=Math.abs(to-from);
var diff=range-range*factor;
var newMin=+from+diff*percent;
var newMax=+to-diff*(1-percent);
return[Math.min(newMin,newMax),Math.max(newMin,newMax)];
},

getMinimumDomain:function getMinimumDomain(point,props,axis){var
minimumZoom=props.minimumZoom;
var originalDomain=this.getDomain(props)[axis];var _originalDomain=_slicedToArray(
originalDomain,2),from=_originalDomain[0],to=_originalDomain[1];
var defaultMin=Math.abs(from-to)/1000;
var extent=minimumZoom?minimumZoom[axis]||defaultMin:defaultMin;
var minExtent=point-extent/2;
var maxExtent=point+extent/2;
return[
minExtent>from&&minExtent<to?minExtent:from,
maxExtent<to&&maxExtent>from?maxExtent:+from+extent/2];

},

getScaleFactor:function getScaleFactor(evt){
var sign=evt.deltaY>0?1:-1;

var delta=Math.min(Math.abs(evt.deltaY/300),0.5);
return Math.abs(1+sign*delta);
},

getScalePercent:function getScalePercent(evt,props,axis){
var originalDomain=this.getDomain(props);var _originalDomain$axis=_slicedToArray(
originalDomain[axis],2),from=_originalDomain$axis[0],to=_originalDomain$axis[1];
var position=this.getPosition(evt,props,originalDomain);
return(position[axis]-from)/Math.abs(to-from);
},

getPosition:function getPosition(evt,props,originalDomain){var _Selection$getSVGEven=
_victoryCore.Selection.getSVGEventCoordinates(evt),x=_Selection$getSVGEven.x,y=_Selection$getSVGEven.y;
var originalScale={
x:props.scale.x.domain(originalDomain.x),
y:props.scale.y.domain(originalDomain.y)};

return _victoryCore.Selection.getDataCoordinates(props,originalScale,x,y);
},








pan:function pan(currentDomain,originalDomain,delta){var _currentDomain$map=
currentDomain.map(function(val){return+val;}),_currentDomain$map2=_slicedToArray(_currentDomain$map,2),fromCurrent=_currentDomain$map2[0],toCurrent=_currentDomain$map2[1];var _originalDomain$map=
originalDomain.map(function(val){return+val;}),_originalDomain$map2=_slicedToArray(_originalDomain$map,2),fromOriginal=_originalDomain$map2[0],toOriginal=_originalDomain$map2[1];
var lowerBound=fromCurrent+delta;
var upperBound=toCurrent+delta;
var newDomain=void 0;
if(lowerBound>fromOriginal&&upperBound<toOriginal){
newDomain=[lowerBound,upperBound];
}else if(lowerBound<fromOriginal){
var dx=toCurrent-fromCurrent;
newDomain=[fromOriginal,fromOriginal+dx];
}else if(upperBound>toOriginal){
var _dx=toCurrent-fromCurrent;
newDomain=[toOriginal-_dx,toOriginal];
}else{
newDomain=currentDomain;
}
return _victoryCore.Collection.containsDates(currentDomain)||_victoryCore.Collection.containsDates(originalDomain)?
newDomain.map(function(val){return new Date(val);}):newDomain;
},

getDomainScale:function getDomainScale(domain,scale,axis){
var axisDomain=Array.isArray(domain)?domain:domain[axis];var _axisDomain=_slicedToArray(
axisDomain,2),from=_axisDomain[0],to=_axisDomain[1];
var range=scale[axis].range();
var plottableWidth=Math.abs(range[0]-range[1]);
return plottableWidth/(to-from);
},

handleAnimation:function handleAnimation(ctx){
var getTimer=(0,_isFunction3.default)(ctx.getTimer)&&ctx.getTimer.bind(ctx);
if(getTimer&&(0,_isFunction3.default)(getTimer().bypassAnimation)){
getTimer().bypassAnimation();
return(0,_isFunction3.default)(getTimer().resumeAnimation)?
function(){return getTimer().resumeAnimation();}:undefined;
}
return undefined;
},

getLastDomain:function getLastDomain(targetProps,originalDomain){var
zoomDomain=targetProps.zoomDomain,cachedZoomDomain=targetProps.cachedZoomDomain,currentDomain=targetProps.currentDomain,domain=targetProps.domain;
if(zoomDomain&&!(0,_isEqual3.default)(zoomDomain,cachedZoomDomain)){
return(0,_defaults3.default)(
{},zoomDomain,domain);

}
return(0,_defaults3.default)(
{},currentDomain||zoomDomain||originalDomain,domain);

},

getDomain:function getDomain(props){var
originalDomain=props.originalDomain,domain=props.domain,children=props.children,dimension=props.dimension;
var childComponents=_react.Children.toArray(children);
var childrenDomain={};
if(childComponents.length){
childrenDomain=dimension?_defineProperty({},
dimension,_wrapper2.default.getDomainFromChildren(props,dimension,childComponents)):
{
x:_wrapper2.default.getDomainFromChildren(props,"x",childComponents),
y:_wrapper2.default.getDomainFromChildren(props,"y",childComponents)};

}
return(0,_defaults3.default)({},childrenDomain,originalDomain,domain);
},

onMouseDown:function onMouseDown(evt){
evt.preventDefault();var _Selection$getSVGEven2=
_victoryCore.Selection.getSVGEventCoordinates(evt),x=_Selection$getSVGEven2.x,y=_Selection$getSVGEven2.y;
return[{
target:"parent",
mutation:function mutation(){
return{
startX:x,startY:y,panning:true,
parentControlledProps:["domain"]};

}}];

},

onMouseUp:function onMouseUp(){
return[{
target:"parent",
mutation:function mutation(){
return{panning:false};
}}];

},

onMouseLeave:function onMouseLeave(){
return[{
target:"parent",
mutation:function mutation(){
return{panning:false};
}}];

},

onMouseMove:function onMouseMove(evt,targetProps,eventKey,ctx){
if(targetProps.panning){var
scale=targetProps.scale,startX=targetProps.startX,startY=targetProps.startY,onDomainChange=targetProps.onDomainChange,dimension=targetProps.dimension,zoomDomain=targetProps.zoomDomain;var _Selection$getSVGEven3=
_victoryCore.Selection.getSVGEventCoordinates(evt),x=_Selection$getSVGEven3.x,y=_Selection$getSVGEven3.y;
var originalDomain=this.getDomain(targetProps);
var lastDomain=this.getLastDomain(targetProps,originalDomain);
var dx=(startX-x)/this.getDomainScale(lastDomain,scale,"x");
var dy=(y-startY)/this.getDomainScale(lastDomain,scale,"y");
var currentDomain={
x:dimension==="y"?originalDomain.x:this.pan(lastDomain.x,originalDomain.x,dx),
y:dimension==="x"?originalDomain.y:this.pan(lastDomain.y,originalDomain.y,dy)};

var resumeAnimation=this.handleAnimation(ctx);
if((0,_isFunction3.default)(onDomainChange)){
onDomainChange(currentDomain);
}
return[{
target:"parent",
callback:resumeAnimation,
mutation:function mutation(){
return{
parentControlledProps:["domain"],startX:x,startY:y,
domain:currentDomain,currentDomain:currentDomain,originalDomain:originalDomain,cachedZoomDomain:zoomDomain};

}}];

}
return undefined;
},

onWheel:function onWheel(evt,targetProps,eventKey,ctx){
if(!targetProps.allowZoom){
return{};
}var
onDomainChange=targetProps.onDomainChange,dimension=targetProps.dimension,zoomDomain=targetProps.zoomDomain;
var originalDomain=this.getDomain(targetProps);
var lastDomain=this.getLastDomain(targetProps,originalDomain);var
x=lastDomain.x,y=lastDomain.y;
var currentDomain={
x:dimension==="y"?lastDomain.x:this.scale(x,evt,targetProps,"x"),
y:dimension==="x"?lastDomain.y:this.scale(y,evt,targetProps,"y")};

var resumeAnimation=this.handleAnimation(ctx);
if((0,_isFunction3.default)(onDomainChange)){
onDomainChange(currentDomain);
}
return[{
target:"parent",
callback:resumeAnimation,
mutation:function mutation(){
return{
domain:currentDomain,currentDomain:currentDomain,originalDomain:originalDomain,cachedZoomDomain:zoomDomain,
parentControlledProps:["domain"],panning:false};

}}];

}};exports.


RawZoomHelpers=Helpers;exports.default=

{
onMouseDown:Helpers.onMouseDown.bind(Helpers),
onMouseUp:Helpers.onMouseUp.bind(Helpers),
onMouseLeave:Helpers.onMouseLeave.bind(Helpers),
onMouseMove:(0,_throttle3.default)(
(0,_eventHandlers.attachId)(Helpers.onMouseMove.bind(Helpers)),
16,
{leading:true,trailing:false}),

onWheel:(0,_throttle3.default)(
(0,_eventHandlers.attachId)(Helpers.onWheel.bind(Helpers)),
16,
{leading:true,trailing:false})};